# 使用 NVIDIA CUDA 的基底映像
FROM nvidia/cuda:12.8.1-cudnn-devel-ubuntu22.04

ARG DEBIAN_FRONTEND=noninteractive
ENV PYTHON_VERSION=3.10
ARG CONDA_DIR=/opt/miniforge

# 安裝必要套件與語系
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        build-essential \
        software-properties-common \
        curl \
        wget \
        git \
        gcc \
        g++ \
        cmake \
        sudo \
        net-tools \
        ffmpeg \
        locales

# 添加 Python 3.10 PPA
RUN add-apt-repository -y ppa:deadsnakes/ppa && \
    apt-get update && \
    apt install -y python$PYTHON_VERSION python$PYTHON_VERSION-dev python3-pip python$PYTHON_VERSION-distutils gfortran libopenblas-dev liblapack-dev

# 安裝 Miniforge
RUN curl -sL https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh -o miniforge.sh && \
    /bin/bash miniforge.sh -f -b -p $CONDA_DIR && \
    rm miniforge.sh && \
    echo "export PATH=\"$CONDA_DIR/bin:$PATH\"" >> ~/.bashrc && \
    . "$CONDA_DIR/bin/activate" && \
    conda install -c conda-forge python=$PYTHON_VERSION && \
    conda clean --all -f -y

ENV PATH="$CONDA_DIR/bin:$PATH"

# 安裝 TA-Lib 0.6.4
RUN wget https://github.com/ta-lib/ta-lib/releases/download/v0.6.4/ta-lib-0.6.4-src.tar.gz && \
    tar -xzf ta-lib-0.6.4-src.tar.gz && \
    cd ta-lib-0.6.4/ && \
    ./configure --prefix=/usr && \
    make && \
    make install && \
    cd .. && \
    rm -rf ta-lib-0.6.4 ta-lib-0.6.4-src.tar.gz && \
    pip install ta-lib

# 升級 pip 並安裝 Python 套件
RUN python3 -m pip install --upgrade pip setuptools && \
    pip install \
        jupyterlab \
        yt-dlp \
        pandas \
        numpy \
        matplotlib \
        scikit-learn \
        tensorflow \
        keras \
        fastapi \
        uvicorn \
        pymongo \
        openai-whisper \
        psycopg2-binary \
        sqlalchemy \
        finlab \
        xgboost \
        catboost \
        python-telegram-bot \
        line-bot-sdk \
        anyio \
        aiohttp \
        psycopg2-binary \
        asyncpg \
        aiopg \
        aiortc \
        fastapi-sse \
        discord.py \
        aiofiles \
        pyannote.audio \
        opencc-python-reimplemented


RUN update-ca-certificates
RUN python3 -m pip install torch torchvision torchaudio

RUN python3 -m pip install git+https://github.com/microsoft/qlib.git || echo "[Warning] qlib 安裝失敗，請手動在 Jupyter Lab 中安裝"

RUN rm -r ~/.cache/pip

# 語系設定：預設英文，支援多國語言文件顯示
RUN echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen && \
    echo "zh_TW.UTF-8 UTF-8" >> /etc/locale.gen && \
    echo "ja_JP.UTF-8 UTF-8" >> /etc/locale.gen && \
    echo "ko_KR.UTF-8 UTF-8" >> /etc/locale.gen && \
    echo "ru_RU.UTF-8 UTF-8" >> /etc/locale.gen && \
    echo "de_DE.UTF-8 UTF-8" >> /etc/locale.gen && \
    echo "fr_FR.UTF-8 UTF-8" >> /etc/locale.gen && \
    echo "ar_SA.UTF-8 UTF-8" >> /etc/locale.gen && \
    echo "es_ES.UTF-8 UTF-8" >> /etc/locale.gen && \
    locale-gen

ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US \
    LC_ALL=en_US.UTF-8

# 設定工作目錄與開放 Jupyter Lab port
WORKDIR /workspace
EXPOSE 8888

# 啟動 Jupyter Lab
CMD ["jupyter", "lab", "--ip=0.0.0.0", "--allow-root", "--LabApp.token=''"]
